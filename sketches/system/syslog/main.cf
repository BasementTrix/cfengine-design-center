body file control
{
      namespace => "cfdc_syslog";
}

bundle agent set(runenv, metadata, syslog_file, empty_first, ensured_kv, removed_kv, removed_vars)
{
#@include "REPO/sketch_template/standard.inc"

  vars:
      "syslog_vars" slist => getindices(ensured_kv);

      "removed_kvindices" slist => getindices(removed_kv);

      # build the array of things to be removed
      "removed[$(removed_vars)]"  string => ".*";
      "removed[$(removed_kvindices)]" string => "$($(removed_kv)[$(removed_kvindices)])";

    second_class_pass::
      "removed_indices" slist => { getindices("cfdc_syslog:set.removed") };

  classes:
      # We need to know if we are on the second pass
      "second_class_pass" and => {"first_class_pass"};
      "first_class_pass" and => {"any"};

      "empty_first" expression => strcmp($(empty_first), "1");
      "have_removed_indices" expression => isvariable("removed_indices");

  files:
    !empty_first::
      "$(syslog_file)"
      create => "true",
      handle => "syslog_files_noempty",
      edit_line => default:set_line_based("cfdc_syslog:set.ensured_kv", " ", "\s+", ".*", "\s*#\s*"),
      classes => default:if_repaired("syslog_reload"),
      comment => "Only ensure specific defined values are present";

    empty_first::
      "$(syslog_file)"
      create => "true",
      handle => "syslog_files_empty_first",
      edit_defaults => default:empty,
      edit_line => default:set_line_based("cfdc_syslog:set.ensured_kv", " ", "\s+", ".*", "\s*#\s*"),
      classes => default:if_repaired("syslog_reload"),
      comment => "Empty file before ensuring specified values are present,
this effectively promises the full file content.";

    have_removed_indices::
      "$(syslog_file)"
      create => "true",
      edit_line => cfdc_syslog:del_syslog_values("cfdc_syslog:set.removed"),
      classes => default:if_repaired("syslog_reload"),
      comment => "Ensure the variables and values given do not exist at all.";

  commands:
    syslog_reload.(sunos_5_8|sunos_5_9)::
      "/etc/init.d/syslog stop && /etc/init.d/syslog start"
      contain => default:in_shell;
    syslog_reload.(sunos_5_10|sunos_5_11)::
      "/usr/sbin/svcadm restart svc:/network/ntp:default";
    syslog_proc_start.(sunos_5_8|sunos_5_9)::
      "/etc/init.d/syslog start";
    syslog_proc_start.(sunos_5_10|sunos_5_11)::
      "/usr/sbin/svcadm enable svc:/network/ntp:default";

  services:
    syslog_reload.linux::
      "rsyslog"
      service_policy => "restart",
      classes => default:if_repaired("syslog_reloaded"),
      service_method => default:bootstart,
      comment => "Reload syslog after repairing configuration";

  reports:
      "$(syslog_file)" bundle_return_value_index => "syslog_file";

    dc_verbose.empty_first::
      "$(this.bundle): $(syslog_file) will be emptied before editing";

    dc_verbose::
      "$(this.bundle): VERBOSE is turned on for syslog";

      "$(this.bundle): Set syslog var: $(syslog_vars)=$(ensured_kv[$(syslog_vars)])";
    have_removed_indices.dc_verbose::
      "$(this.bundle): Remove syslog var: $(removed_indices)=$(cfdc_syslog:set.removed[$(removed_indices)])";

    dc_verbose::
      "$(this.bundle): I repaired $(syslog_file), syslog needs to be reloaded"
      ifvarclass => "syslog_reload";

    dc_verbose.syslog_reloaded::
      "$(this.bundle): I successfully reloaded syslog";
}

bundle edit_line del_syslog_values(v)
{
  vars:

      "index" slist => getindices("$(v)");

      # Be careful if the index string contains funny chars

      "cindex[$(index)]" string => canonify("$(index)");

  delete_lines:

      "$(index)\s+$($(v)[$(index)])"
      comment => "Delete a specific variable";

  reports:
    dc_verbose::
      "$(this.bundle): we will delete lines matching: '$(index)\s*=\s*$($(v)[$(index)])'";
}
